{"remainingRequest":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eric/Workspace/edustreamx/src/components/SplashForm.vue?vue&type=style&index=0&id=53faf9b6&scoped=true&lang=css&","dependencies":[{"path":"/home/eric/Workspace/edustreamx/src/components/SplashForm.vue","mtime":1554790351510},{"path":"/home/eric/Workspace/edustreamx/node_modules/css-loader/index.js","mtime":1554753030031},{"path":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1554753030671},{"path":"/home/eric/Workspace/edustreamx/node_modules/postcss-loader/src/index.js","mtime":1554753030315},{"path":"/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js","mtime":1554753029931},{"path":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js","mtime":1554753030671}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.formdiv {\n  display: inline-block;\n  min-width:300px;\n}\ninput {\n  margin: 10px;\n}\n.mainblock {\n  padding-top:10%;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n}\n",{"version":3,"sources":["SplashForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SplashForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"mainblock\">\n  <div v-if=\"error !== ''\" id=\"gotoRoom\">\n  <h3>Error: {{error}}</h3>\n  <b-button v-on:click=\"error=''\">Go Back</b-button>\n  </div>\n  <span class=\"formdiv\" v-else>\n  <div class=\"header\">\n  <b-nav pills>\n  <b-nav-item v-on:click=\"activeTab=1\" v-bind:active=\"activeTab === 1\">Teacher</b-nav-item>\n  <b-nav-item v-on:click=\"activeTab=2\" v-bind:active=\"activeTab === 2\">Student</b-nav-item>\n  </b-nav>\n  </div>\n  <form v-if=\"activeTab === 1\" id=\"createRoom\">\n  <b-form-input id=\"roomName\" v-model=\"roomName\" placeholder=\"Classroom Name\"></b-form-input>\n  <b-button v-on:click=\"createRoom\" id=\"submit\">Create Classroom!</b-button>\n  </form>\n  <form v-else id=\"joinRoom\">\n    <b-form-input id=\"roomID\" v-model=\"roomName\" placeholder=\"Classroom ID\"></b-form-input>\n    <b-form-input id=\"username\" v-model=\"username\" placeholder=\"Username\"></b-form-input>\n    <b-button v-on:click=\"joinRoom\" id=\"submit\">Join Room</b-button>\n  </form>\n  </span>\n  </div>\n  </template>\n<style scoped>\n.formdiv {\n  display: inline-block;\n  min-width:300px;\n}\ninput {\n  margin: 10px;\n}\n.mainblock {\n  padding-top:10%;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n}\n</style>\n\n<script>\n/* eslint-disable */\nimport { TeacherNode, RTCNode }  from '../rtc.js'\nimport '../jquery-3.3.1.min.js'\n\n// tab numbers\nconst TEACHER = 1;\nconst STUDENT = 2;\n\n// roomID used for joining\n// roomName used for creating\n\nfunction postData(url = ``, data = {}) {\n  // Default options are marked with *\n    return fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            \"Content-Type\": \"application/json\",\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n    .then(response => response.json()) // parses JSON response into native Javascript objects \n    .catch(err => console.log(\"error with response from fetch\", err));\n} \n\nexport default {\n  name: 'SplashForm',\n  data: function()  {\n    return { \n      roomName: \"\",\n      roomID: \"\",\n      roomCreated: false,\n      room_url: \"\",\n      activeTab : 1 ,\n      error: \"\",\n      username: \"\",\n      };\n  },\n  methods: {\n    createRoom: function() {\n      postData(\"/queryRoom\", { roomName: this.roomName})\n        .then(respObj => {\n          if (respObj.hasRoom) {\n            this.error = \"Room name taken\";\n          }\n          else {\n            this.$emit('clientType', 'teacher');\n            this.$emit('roomName', this.roomName);\n            this.$emit(\"username\", this.username);\n          }\n        })\n        .catch(err => console.log(\"fetch error handling failed\", err));\n        /* TESTING\n          this.$emit('clientType', 'teacher');\n          this.$emit('roomName', this.roomName);\n          this.$emit(\"username\", this.username);*/\n    },\n    joinRoom: function() {\n      postData(\"/queryRoom\", { roomName: this.roomName})\n        .then(respObj => {\n          if (! respObj.hasRoom) {\n            this.error = `Room '${this.roomName}' does not exist.`;\n          }\n          else {\n            this.$emit('clientType', 'student');\n            this.$emit('roomName', this.roomName);\n            this.$emit(\"username\", this.username);\n          }\n        })\n        .catch(err => console.log(\"fetch error handling failed\", err));\n        /*\n            this.$emit('clientType', 'student');\n            this.$emit('roomID', this.roomID);\n            this.$emit(\"username\", this.username);*/\n    }\n  },\n  props: {\n  }\n}\n</script>"]}]}