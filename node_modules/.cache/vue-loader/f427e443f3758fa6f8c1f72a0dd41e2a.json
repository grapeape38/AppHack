{"remainingRequest":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eric/Workspace/edustreamx/src/components/ChatBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/eric/Workspace/edustreamx/src/components/ChatBox.vue","mtime":1554791366359},{"path":"/home/eric/Workspace/edustreamx/node_modules/babel-loader/lib/index.js","mtime":1554753029823},{"path":"/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js","mtime":1554753029931},{"path":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js","mtime":1554753030671}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport ChatMessage from './ChatMessage'\nexport default {\n    name: \"ChatBox\",\n    data: function() {\n        return {\n            chatMessages: [],\n            participants: [],\n            p_loaded: false,\n            activeTab: 1,\n            cur_id: 0,\n            chat: \"\"\n        }\n    },\n    props: [\"socket\", \"username\", \"roomName\"],\n    watch: {\n      socket(newval, oldval) {\n        this.socket = newval;\n        this.socket.receiveChat = this.receiveChat;\n        this.socket.userJoin = this.userJoin;\n      },\n      activeTab : function() {\n          if (this.activeTab == 2 && !this.p_loaded) {\n             this.p_loaded = true\n             console.log(\"roomID\", this.roomName)\n            fetch('/queryRoom?roomName='+this.roomName)\n            .then(function(response) {\n                return response.json();\n            }).then((resp) => {\n                this.participants = resp.participants\n            }).catch(e => \n                console.log('fetch failed', e)\n            )\n          }\n      }\n    },\n    components: {\n        ChatMessage\n    },\n    methods: {\n        addChat() {\n          this.socket.sendMessage({\n            type: \"userChat\",\n            text: this.chat,\n            username: this.username,\n          })\n          /*testing\n          this.receiveChat(this.chat, this.username);*/\n        },\n        userJoin(username, id) {\n            this.participants.push({username:username, id:id});\n        },\n        receiveChat(text, username) { // (from server)\n            var msg_obj = {\n                username: username,\n                message: text,\n                question: text.substr(-1) === '?',\n                id: this.cur_id++ \n            }\n            this.chatMessages.push(msg_obj);\n            var chatdisplay = document.getElementById(\"chatdisplay\");\n            chatdisplay.scrollTop = chatdisplay.scrollHeight;\n        }\n    }\n}\n",{"version":3,"sources":["ChatBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChatBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div id=\"chatbox\">\n    <b-nav tabs>\n        <b-nav-item v-on:click=\"activeTab=1\" v-bind:active=\"activeTab===1\">Chat</b-nav-item>\n        <b-nav-item v-on:click=\"activeTab=2\" v-bind:active=\"activeTab===2\">Participants</b-nav-item>\n    </b-nav>\n    <div v-if=\"activeTab===1\">\n        <ul id=\"chatdisplay\">\n            <ChatMessage\n                v-for=\"msg in chatMessages\"\n                v-bind:key=\"msg.id\"\n                v-bind:message=\"msg.username + ': ' + msg.message\"\n                v-bind:question=\"msg.question\"\n            ></ChatMessage>\n        </ul>\n        <form v-on:submit=\"addChat\" id=\"msg_form\">\n            <b-form-input id=\"msg_input\" v-model=\"chat\" placeholder=\"type your message\"></b-form-input>\n            <b-button v-on:click=\"addChat\" id=\"msg_button\">Post Message</b-button>\n        </form>\n    </div>\n    <div v-else>\n        <ul id=\"participants\">\n            <li\n                v-for=\"p in participants\"\n                v-bind:key=\"p.id\"\n            >{{p.username}}</li>\n        </ul>\n    </div>\n</div>\n</template>\n\n<script>\n\nimport ChatMessage from './ChatMessage'\nexport default {\n    name: \"ChatBox\",\n    data: function() {\n        return {\n            chatMessages: [],\n            participants: [],\n            p_loaded: false,\n            activeTab: 1,\n            cur_id: 0,\n            chat: \"\"\n        }\n    },\n    props: [\"socket\", \"username\", \"roomName\"],\n    watch: {\n      socket(newval, oldval) {\n        this.socket = newval;\n        this.socket.receiveChat = this.receiveChat;\n        this.socket.userJoin = this.userJoin;\n      },\n      activeTab : function() {\n          if (this.activeTab == 2 && !this.p_loaded) {\n             this.p_loaded = true\n             console.log(\"roomID\", this.roomName)\n            fetch('/queryRoom?roomName='+this.roomName)\n            .then(function(response) {\n                return response.json();\n            }).then((resp) => {\n                this.participants = resp.participants\n            }).catch(e => \n                console.log('fetch failed', e)\n            )\n          }\n      }\n    },\n    components: {\n        ChatMessage\n    },\n    methods: {\n        addChat() {\n          this.socket.sendMessage({\n            type: \"userChat\",\n            text: this.chat,\n            username: this.username,\n          })\n          /*testing\n          this.receiveChat(this.chat, this.username);*/\n        },\n        userJoin(username, id) {\n            this.participants.push({username:username, id:id});\n        },\n        receiveChat(text, username) { // (from server)\n            var msg_obj = {\n                username: username,\n                message: text,\n                question: text.substr(-1) === '?',\n                id: this.cur_id++ \n            }\n            this.chatMessages.push(msg_obj);\n            var chatdisplay = document.getElementById(\"chatdisplay\");\n            chatdisplay.scrollTop = chatdisplay.scrollHeight;\n        }\n    }\n}\n</script>\n\n<style scoped>\n    div {\n        height:100%;\n    }\n    li {\n        list-style-type: none\n    }\n    #chatbox {\n        width: 30%;\n        float: right;\n    }\n    form, button {\n        margin-top: 15px\n    }\n    #chatdisplay {\n        height:70%;\n        overflow-y: scroll;\n        list-style-type: none;\n    }\n</style>\n"]}]}