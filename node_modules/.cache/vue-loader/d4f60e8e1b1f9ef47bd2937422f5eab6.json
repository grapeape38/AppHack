{"remainingRequest":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eric/Workspace/edustreamx/src/components/Classroom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/eric/Workspace/edustreamx/src/components/Classroom.vue","mtime":1554761009940},{"path":"/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js","mtime":1554753029931},{"path":"/home/eric/Workspace/edustreamx/node_modules/babel-loader/lib/index.js","mtime":1554753029823},{"path":"/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js","mtime":1554753029931},{"path":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js","mtime":1554753030671}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { TeacherNode, RTCNode }  from '../rtc.js'\nimport Canvas from './Canvas'\nimport ChatBox from './ChatBox'\nimport StudentDash from './StudentDash'\nimport TeacherDash from './TeacherDash'\nfunction postData(url = ``, data = {}) {\n  // Default options are marked with *\n    return fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            \"Content-Type\": \"application/json\",\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n    .then(response => response.json()) // parses JSON response into native Javascript objects \n    .catch(err => console.log(\"error with response from fetch\", err));\n} \n\nexport default {\n    name: \"Classroom\",\n    props: [\"clientType\", \"canvas\", \"roomID\", \"roomName\", \"username\"],\n    data: function() {\n        return { \n          broadcasting: false,\n          socket: null,\n        };\n    },\n    components: {\n        Canvas,\n        ChatBox,\n        StudentDash,\n        TeacherDash\n    },\n    created: function() {\n        this.broadcasting = this.clientType === 'teacher'\n    },\n    methods: {\n        canvasCallback(c, v) {\n            var canvas = c\n            var video = v\n            console.log(\"created room for type: \", this.clientType, canvas, video);\n            if (this.clientType === \"teacher\") {\n              this.rtc = new TeacherNode(canvas, video);\n              this.socket = this.rtc.socket;\n              this.rtc.socket.checkWS().then(() => {\n                this.rtc.socket.sendMessage({ type: \"createRoom\", roomName: this.roomName });\n                console.log(\"sent create room req\", this.roomName);\n              })\n              .catch(err => console.log(\"Unable to create classroom -- ws uninitialized\", err));\n            }\n            else if (this.clientType === \"student\") {\n              this.rtc = new RTCNode(video);\n              this.socket = this.rtc.socket;\n              this.rtc.socket.checkWS().then(() => {\n                this.rtc.socket.sendMessage({ \n                  type: \"joinRoom\",\n                  roomName: this.roomID,\n                })\n              })\n              .catch(err => console.log(\"Unable to join classroom -- \", err));\n            }\n            else {\n              throw \"Unknown client type: \" + this.clientType;\n            }\n          },\n        requestAccess() {\n          postData(\"/reqbroadcast\", {\n            cid: this.rtc.clientID,\n          }).then(json => {})\n          .catch(err => console.log(\"err requsting access\", err));\n        },\n        grantReq(cid) {\n          console.log(\"cid = \", cid);\n          this.socket.sendMessage( {\n            type: \"grantBroadcast\",\n            pid: this.rtc.clientID,\n            cid: cid,\n          })\n        }\n    }\n}\n",{"version":3,"sources":["Classroom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Classroom.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"main\">\n        <div id=\"canvasdash\">\n          <Canvas v-bind:broadcasting=\"broadcasting\"\n                  clientType=\"clientType\" :canvasCallback=\"canvasCallback\"></Canvas>\n          <StudentDash v-on:requestAcc=\"requestAccess\" :socket=\"socket\" v-if=\"clientType==='student'\" :broadcasting=\"broadcasting\"></StudentDash> \n          <TeacherDash v-on:grantReq=\"grantReq($event)\" :socket=\"socket\"\n          v-else :broadcasting=\"broadcasting\" :requestActive=\"requestActive\"></TeacherDash>\n        </div>\n        <ChatBox :socket=\"socket\" :username=\"username\"></ChatBox>\n    </div>\n</template>\n\n<style>\n#dash {\n  height:15%;\n  padding-top:10px;\n}\n#canvasdash {\n  float:left;\n  height:100%;\n  width:70%;\n}\n#main {\n  height: 100%;\n}\n</style>\n\n<script>\nimport { TeacherNode, RTCNode }  from '../rtc.js'\nimport Canvas from './Canvas'\nimport ChatBox from './ChatBox'\nimport StudentDash from './StudentDash'\nimport TeacherDash from './TeacherDash'\nfunction postData(url = ``, data = {}) {\n  // Default options are marked with *\n    return fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            \"Content-Type\": \"application/json\",\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n    .then(response => response.json()) // parses JSON response into native Javascript objects \n    .catch(err => console.log(\"error with response from fetch\", err));\n} \n\nexport default {\n    name: \"Classroom\",\n    props: [\"clientType\", \"canvas\", \"roomID\", \"roomName\", \"username\"],\n    data: function() {\n        return { \n          broadcasting: false,\n          socket: null,\n        };\n    },\n    components: {\n        Canvas,\n        ChatBox,\n        StudentDash,\n        TeacherDash\n    },\n    created: function() {\n        this.broadcasting = this.clientType === 'teacher'\n    },\n    methods: {\n        canvasCallback(c, v) {\n            var canvas = c\n            var video = v\n            console.log(\"created room for type: \", this.clientType, canvas, video);\n            if (this.clientType === \"teacher\") {\n              this.rtc = new TeacherNode(canvas, video);\n              this.socket = this.rtc.socket;\n              this.rtc.socket.checkWS().then(() => {\n                this.rtc.socket.sendMessage({ type: \"createRoom\", roomName: this.roomName });\n                console.log(\"sent create room req\", this.roomName);\n              })\n              .catch(err => console.log(\"Unable to create classroom -- ws uninitialized\", err));\n            }\n            else if (this.clientType === \"student\") {\n              this.rtc = new RTCNode(video);\n              this.socket = this.rtc.socket;\n              this.rtc.socket.checkWS().then(() => {\n                this.rtc.socket.sendMessage({ \n                  type: \"joinRoom\",\n                  roomName: this.roomID,\n                })\n              })\n              .catch(err => console.log(\"Unable to join classroom -- \", err));\n            }\n            else {\n              throw \"Unknown client type: \" + this.clientType;\n            }\n          },\n        requestAccess() {\n          postData(\"/reqbroadcast\", {\n            cid: this.rtc.clientID,\n          }).then(json => {})\n          .catch(err => console.log(\"err requsting access\", err));\n        },\n        grantReq(cid) {\n          console.log(\"cid = \", cid);\n          this.socket.sendMessage( {\n            type: \"grantBroadcast\",\n            pid: this.rtc.clientID,\n            cid: cid,\n          })\n        }\n    }\n}\n</script>"]}]}