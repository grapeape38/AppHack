{"remainingRequest":"/home/eric/Workspace/edustreamx/node_modules/thread-loader/dist/cjs.js!/home/eric/Workspace/edustreamx/node_modules/babel-loader/lib/index.js!/home/eric/Workspace/edustreamx/node_modules/eslint-loader/index.js??ref--13-0!/home/eric/Workspace/edustreamx/src/client-socket.js","dependencies":[{"path":"/home/eric/Workspace/edustreamx/src/client-socket.js","mtime":1554789862404},{"path":"/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js","mtime":1554753029931},{"path":"/home/eric/Workspace/edustreamx/node_modules/thread-loader/dist/cjs.js","mtime":1554753030639},{"path":"/home/eric/Workspace/edustreamx/node_modules/babel-loader/lib/index.js","mtime":1554753029823},{"path":"/home/eric/Workspace/edustreamx/node_modules/eslint-loader/index.js","mtime":1554753030083}],"contextDependencies":[],"result":["import _JSON$stringify from \"/home/eric/Workspace/edustreamx/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"/home/eric/Workspace/edustreamx/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"/home/eric/Workspace/edustreamx/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/eric/Workspace/edustreamx/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/* eslint-disable */\nvar WS_OPEN = 1;\n\nvar ClientSocket =\n/*#__PURE__*/\nfunction () {\n  function ClientSocket(rtcNode) {\n    _classCallCheck(this, ClientSocket);\n\n    this.ws = this.initWS();\n    this.rtcNode = rtcNode;\n    this.wsConnected = false;\n    this.becomeBroadcaster = null;\n  }\n\n  _createClass(ClientSocket, [{\n    key: \"initWS\",\n    value: function initWS() {\n      var _this = this;\n\n      var ws = new WebSocket(\"ws://\" + location.host);\n\n      ws.onmessage = function (event) {\n        _this.processServerMessage(event.data);\n      };\n\n      ws.onopen = function (event) {\n        console.log(\"WS open\");\n        _this.wsConnected = true;\n      };\n\n      ws.onclose = function () {\n        return console.log(\"WS closed\");\n      };\n\n      ws.onerror = function (err) {\n        return console.log(\"WS error:\", err);\n      };\n\n      return ws;\n    }\n  }, {\n    key: \"checkWS\",\n    value: function checkWS() {\n      var _this2 = this;\n\n      var checks = 0;\n      return new _Promise(function (resolve, reject) {\n        var query = setInterval(function () {\n          if (_this2.wsConnected) {\n            clearInterval(query);\n            resolve();\n          }\n\n          if (checks++ > 10) reject();\n        }, 1000);\n      });\n    }\n  }, {\n    key: \"processServerMessage\",\n    value: function processServerMessage(msg) {\n      msg = JSON.parse(msg);\n\n      switch (msg.type) {\n        case \"assignID\":\n          this.rtcNode.clientID = msg.clientID;\n          break;\n\n        case \"childAnswer\":\n          this.rtcNode.outgoingRTC.get(msg.cid).signal(msg.answer);\n          break;\n\n        case \"initiateConnection\":\n          this.rtcNode.createSourceRTC(msg.cid);\n          break;\n\n        case \"parentOffer\":\n          console.log(\"got parent offer\");\n          this.rtcNode.incomingRTC = this.rtcNode.createReceiverRTC(msg.offer);\n          this.rtcNode.parentID = msg.pid;\n          break;\n\n        case \"breakWithParent\":\n          this.rtcNode.destroyIncoming();\n          break;\n\n        case \"breakWithChild\":\n          this.rtcNode.destroyOutgoing(msg.cid);\n          break;\n\n        case \"classroomClosed\":\n          this.rtcNode.destroyIncoming();\n          alert(\"Classroom has been closed\");\n          break;\n\n        case \"userJoin\":\n          if (this.userJoin == undefined) throw \"Join is uninitialized for this socket\";\n          console.log(msg.username, msg.id);\n          this.userJoin(msg.username, msg.id);\n\n        case \"addChat\":\n          if (this.receiveChat == undefined) throw \"Chat is uninitialized for this socket\";\n          this.receiveChat(msg.text, msg.username);\n          break;\n\n        case \"requestBroadcast\":\n          var req = {\n            reqMsg: \"Allow \".concat(msg.username, \" to broadcast\"),\n            cid: msg.cid\n          };\n          this.addRequest(req);\n          break;\n\n        case \"startCast\":\n          this.becomeBroadcaster();\n          break;\n\n        case \"serverError\":\n          console.log(\"server error: \", msg.error);\n          break;\n\n        default:\n          throw \"Unknown message type: \" + msg.type;\n      }\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(msgobj) {\n      if (msgobj.type == undefined) throw \"Cannot send message with undefined type\";\n\n      if (this.ws.readyState == WS_OPEN) {\n        this.ws.send(_JSON$stringify(msgobj));\n        console.log(\"sending message to server\");\n      } else throw \"WS error sending message to server: readyState = \" + this.ws.readyState;\n    }\n  }]);\n\n  return ClientSocket;\n}();\n\nexport { ClientSocket };",{"version":3,"sources":["/home/eric/Workspace/edustreamx/src/client-socket.js"],"names":["WS_OPEN","ClientSocket","rtcNode","ws","initWS","wsConnected","becomeBroadcaster","WebSocket","location","host","onmessage","event","processServerMessage","data","onopen","console","log","onclose","onerror","err","checks","resolve","reject","query","setInterval","clearInterval","msg","JSON","parse","type","clientID","outgoingRTC","get","cid","signal","answer","createSourceRTC","incomingRTC","createReceiverRTC","offer","parentID","pid","destroyIncoming","destroyOutgoing","alert","userJoin","undefined","username","id","receiveChat","text","req","reqMsg","addRequest","error","msgobj","readyState","send"],"mappings":"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","sourcesContent":["/* eslint-disable */\nconst WS_OPEN = 1;\n\nclass ClientSocket {\n  constructor(rtcNode) {\n    this.ws = this.initWS();\n    this.rtcNode = rtcNode;\n    this.wsConnected = false;\n    this.becomeBroadcaster = null;\n  }\n\n  initWS() {\n    var ws = new WebSocket(\"ws://\"+location.host);\n    ws.onmessage = (event) => {\n      this.processServerMessage(event.data);\n    };\n    ws.onopen = (event) => { \n      console.log(\"WS open\");\n      this.wsConnected = true;\n    };\n    ws.onclose = () => console.log(\"WS closed\");\n    ws.onerror = (err) => console.log(\"WS error:\", err);\n    return ws;\n  }\n\n  checkWS() {\n    var checks = 0;\n    return new Promise((resolve, reject) => {\n      var query = setInterval(() => {\n        if (this.wsConnected) {\n          clearInterval(query);\n          resolve();\n        }\n        if (checks++ > 10) reject(); \n      }, 1000);\n    });\n  }\n\n  processServerMessage(msg) {\n    msg = JSON.parse(msg);\n    switch (msg.type) {\n      case \"assignID\": \n        this.rtcNode.clientID = msg.clientID;\n        break;\n      case \"childAnswer\":\n        this.rtcNode.outgoingRTC.get(msg.cid).signal(msg.answer);         \n        break;\n      case \"initiateConnection\":\n        this.rtcNode.createSourceRTC(msg.cid);\n        break;\n      case \"parentOffer\": \n        console.log(\"got parent offer\");\n        this.rtcNode.incomingRTC = this.rtcNode.createReceiverRTC(msg.offer);\n        this.rtcNode.parentID = msg.pid;\n        break;\n      case \"breakWithParent\":\n        this.rtcNode.destroyIncoming();\n        break;\n      case \"breakWithChild\":\n        this.rtcNode.destroyOutgoing(msg.cid);\n        break; \n      case \"classroomClosed\":\n        this.rtcNode.destroyIncoming();\n        alert(\"Classroom has been closed\");\n        break;\n      case \"userJoin\":\n        if (this.userJoin== undefined) throw \"Join is uninitialized for this socket\";\n        console.log(msg.username, msg.id)\n        this.userJoin(msg.username, msg.id);\n      case \"addChat\":\n        if (this.receiveChat == undefined) throw \"Chat is uninitialized for this socket\";\n        this.receiveChat(msg.text, msg.username);\n        break;\n      case \"requestBroadcast\": \n        var req = {\n          reqMsg: `Allow ${msg.username} to broadcast`,\n          cid: msg.cid\n        }\n        this.addRequest(req);\n        break;\n      case \"startCast\":\n        this.becomeBroadcaster()\n        break;\n      case \"serverError\": \n        console.log(\"server error: \", msg.error);\n        break;\n      default: throw \"Unknown message type: \" + msg.type;\n    }\n  }\n\n  sendMessage(msgobj) {\n    if (msgobj.type == undefined) throw \"Cannot send message with undefined type\";\n    if (this.ws.readyState == WS_OPEN) {\n      this.ws.send(JSON.stringify(msgobj));\n      console.log(\"sending message to server\");\n    }\n    else\n      throw \"WS error sending message to server: readyState = \" + this.ws.readyState;\n  }\n}\n\n\nexport {\n  ClientSocket as ClientSocket,\n};\n"]}]}