{"remainingRequest":"/home/eric/Workspace/edustreamx/node_modules/thread-loader/dist/cjs.js!/home/eric/Workspace/edustreamx/node_modules/babel-loader/lib/index.js!/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eric/Workspace/edustreamx/src/components/Classroom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/eric/Workspace/edustreamx/src/components/Classroom.vue","mtime":1554790252855},{"path":"/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js","mtime":1554753029931},{"path":"/home/eric/Workspace/edustreamx/node_modules/thread-loader/dist/cjs.js","mtime":1554753030639},{"path":"/home/eric/Workspace/edustreamx/node_modules/babel-loader/lib/index.js","mtime":1554753029823},{"path":"/home/eric/Workspace/edustreamx/node_modules/cache-loader/dist/cjs.js","mtime":1554753029931},{"path":"/home/eric/Workspace/edustreamx/node_modules/vue-loader/lib/index.js","mtime":1554753030671}],"contextDependencies":[],"result":["import _JSON$stringify from \"/home/eric/Workspace/edustreamx/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { RTCNode } from '../rtc.js';\nimport Canvas from './Canvas';\nimport ChatBox from './ChatBox';\nimport StudentDash from './StudentDash';\nimport TeacherDash from './TeacherDash';\n\nfunction postData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Default options are marked with *\n  return fetch(url, {\n    method: \"POST\",\n    // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\",\n    // no-cors, cors, *same-origin\n    cache: \"no-cache\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\",\n    // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\" // \"Content-Type\": \"application/x-www-form-urlencoded\",\n\n    },\n    redirect: \"follow\",\n    // manual, *follow, error\n    referrer: \"no-referrer\",\n    // no-referrer, *client\n    body: _JSON$stringify(data) // body data type must match \"Content-Type\" header\n\n  }).then(function (response) {\n    return response.json();\n  }) // parses JSON response into native Javascript objects \n  .catch(function (err) {\n    return console.log(\"error with response from fetch\", err);\n  });\n}\n\nexport default {\n  name: \"Classroom\",\n  props: [\"clientType\", \"canvas\", \"roomName\", \"username\"],\n  data: function data() {\n    return {\n      broadcasting: false,\n      socket: null\n    };\n  },\n  components: {\n    Canvas: Canvas,\n    ChatBox: ChatBox,\n    StudentDash: StudentDash,\n    TeacherDash: TeacherDash\n  },\n  created: function created() {\n    this.broadcasting = this.clientType === 'teacher';\n  },\n  methods: {\n    canvasCallback: function canvasCallback(c, v) {\n      var _this = this;\n\n      var canvas = c;\n      var video = v;\n      console.log(\"created room for type: \", this.clientType, canvas, video);\n\n      if (this.clientType === \"teacher\") {\n        this.rtc = new RTCNode(canvas, video);\n        this.socket = this.rtc.socket;\n        this.rtc.socket.checkWS().then(function () {\n          _this.rtc.socket.sendMessage({\n            type: \"createRoom\",\n            roomName: _this.roomName\n          });\n\n          console.log(\"sent create room req\", _this.roomName);\n        }).catch(function (err) {\n          return console.log(\"Unable to create classroom -- ws uninitialized\", err);\n        });\n        this.rtc.streamCanvas();\n      } else if (this.clientType === \"student\") {\n        this.rtc = new RTCNode(canvas, video);\n        this.socket = this.rtc.socket;\n        this.rtc.socket.checkWS().then(function () {\n          _this.rtc.socket.sendMessage({\n            type: \"joinRoom\",\n            username: _this.username,\n            roomName: _this.roomName\n          });\n        }).catch(function (err) {\n          return console.log(\"Unable to join classroom -- \", err);\n        });\n      } else {\n        throw \"Unknown client type: \" + this.clientType;\n      }\n\n      this.rtc.socket.becomeBroadcaster = this.becomeBroadcaster;\n    },\n    endBroadcast: function endBroadcast() {\n      console.log(\"ending broadcast\");\n      this.broadcasting = false;\n    },\n    becomeBroadcaster: function becomeBroadcaster() {\n      console.log(\"becoming broadcaster\");\n\n      if (!this.broadcasting) {\n        this.rtc.destroyIncoming();\n        this.broadcasting = true;\n        if (this.clientType === 'student') this.rtc.setTmpBroadcast(this.endBroadcast);\n        this.rtc.socket.sendMessage({\n          type: \"startCast\"\n        });\n        this.rtc.streamCanvas();\n      }\n    },\n    requestAccess: function requestAccess() {\n      postData(\"/reqbroadcast\", {\n        cid: this.rtc.clientID\n      }).then(function (json) {}).catch(function (err) {\n        return console.log(\"err requesting access\", err);\n      });\n    },\n    grantReq: function grantReq(cid) {\n      console.log(\"cid = \", cid);\n      this.socket.sendMessage({\n        type: \"grantBroadcast\",\n        cid: cid\n      });\n      this.broadcasting = false;\n    }\n  }\n};",{"version":3,"sources":["Classroom.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"main\">\n        <div id=\"canvasdash\">\n          <Canvas v-bind:broadcasting=\"broadcasting\"\n                  clientType=\"clientType\" :canvasCallback=\"canvasCallback\"></Canvas>\n          <StudentDash v-on:requestAcc=\"requestAccess\" :socket=\"socket\" v-if=\"clientType==='student'\" :broadcasting=\"broadcasting\"></StudentDash> \n          <TeacherDash \n          v-on:becomeBroadcaster=\"becomeBroadcaster\"\n          v-on:grantReq=\"grantReq($event)\" :socket=\"socket\"\n          v-else :broadcasting=\"broadcasting\"></TeacherDash>\n        </div>\n        <ChatBox :socket=\"socket\" :username=\"username\"\n          :roomName=\"roomName\"></ChatBox>\n    </div>\n</template>\n\n<style>\n#dash {\n  height:15%;\n  padding-top:10px;\n}\nbutton {\n  margin: 10px;\n}\n#canvasdash {\n  float:left;\n  height:100%;\n  width:70%;\n}\n#main {\n  height: 100%;\n}\n</style>\n\n<script>\nimport { RTCNode }  from '../rtc.js'\nimport Canvas from './Canvas'\nimport ChatBox from './ChatBox'\nimport StudentDash from './StudentDash'\nimport TeacherDash from './TeacherDash'\nfunction postData(url = ``, data = {}) {\n  // Default options are marked with *\n    return fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            \"Content-Type\": \"application/json\",\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n    .then(response => response.json()) // parses JSON response into native Javascript objects \n    .catch(err => console.log(\"error with response from fetch\", err));\n} \n\nexport default {\n    name: \"Classroom\",\n    props: [\"clientType\", \"canvas\", \"roomName\", \"username\"],\n    data: function() {\n        return { \n          broadcasting: false,\n          socket: null,\n        };\n    },\n    components: {\n        Canvas,\n        ChatBox,\n        StudentDash,\n        TeacherDash\n    },\n    created: function() {\n        this.broadcasting = this.clientType === 'teacher'\n    },\n    methods: {\n        canvasCallback(c, v) {\n            var canvas = c\n            var video = v\n            console.log(\"created room for type: \", this.clientType, canvas, video);\n            if (this.clientType === \"teacher\") {\n              this.rtc = new RTCNode(canvas, video);\n              this.socket = this.rtc.socket;\n              this.rtc.socket.checkWS().then(() => {\n                this.rtc.socket.sendMessage({ type: \"createRoom\", roomName: this.roomName });\n                console.log(\"sent create room req\", this.roomName);\n              })\n              .catch(err => console.log(\"Unable to create classroom -- ws uninitialized\", err));\n              this.rtc.streamCanvas()\n            }\n            else if (this.clientType === \"student\") {\n              this.rtc = new RTCNode(canvas, video);\n              this.socket = this.rtc.socket;\n              this.rtc.socket.checkWS().then(() => {\n                this.rtc.socket.sendMessage({ \n                  type: \"joinRoom\",\n                  username: this.username,\n                  roomName: this.roomName,\n                })\n              })\n              .catch(err => console.log(\"Unable to join classroom -- \", err));\n            }\n            else {\n              throw \"Unknown client type: \" + this.clientType;\n            }\n            this.rtc.socket.becomeBroadcaster = this.becomeBroadcaster\n          },\n        endBroadcast() {\n          console.log(\"ending broadcast\")\n          this.broadcasting = false\n        },\n        becomeBroadcaster() {\n          console.log(\"becoming broadcaster\")\n          if (!this.broadcasting) {\n            this.rtc.destroyIncoming()\n            this.broadcasting = true\n            if (this.clientType === 'student')\n              this.rtc.setTmpBroadcast(this.endBroadcast)\n            this.rtc.socket.sendMessage({type: \"startCast\"})\n            this.rtc.streamCanvas()\n          }\n        },\n        requestAccess() {\n          postData(\"/reqbroadcast\", {\n            cid: this.rtc.clientID,\n          }).then(json => {})\n          .catch(err => console.log(\"err requesting access\", err));\n        },\n        grantReq(cid) {\n          console.log(\"cid = \", cid);\n          this.socket.sendMessage( {\n            type: \"grantBroadcast\",\n            cid: cid,\n          })\n          this.broadcasting = false\n        }\n    }\n}\n</script>"],"sourceRoot":"src/components"}]}